[
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "responses",
        "importPath": "responses",
        "description": "responses",
        "isExtraImport": true,
        "detail": "responses",
        "documentation": {}
    },
    {
        "label": "remove_user",
        "kind": 5,
        "importPath": "matriales.Data type.code.code_1",
        "description": "matriales.Data type.code.code_1",
        "peekOfCode": "remove_user = input(\"enter your string u want to remove: \")\nif remove_user == \"amit\":\n    input_list.remove(\"amit\")\n    print(input_list)\nelif remove_user == \"learning\":\n    input_list.remove(\"learning\")\n    print(input_list)\nelif remove_user == \"python\":\n    input_list.remove(\"python\")\n    print(input_list)",
        "detail": "matriales.Data type.code.code_1",
        "documentation": {}
    },
    {
        "label": "mean",
        "kind": 2,
        "importPath": "matriales.Fanctions.tasks.calculator_code",
        "description": "matriales.Fanctions.tasks.calculator_code",
        "peekOfCode": "def mean():\n    print(\"Welcome to my Calculator\")\n    while True:  # Keep the calculator running in a loop\n        print(\"Select an operation:\")\n        print(\"1. Addition(+)\\n2. Subtraction(-)\\n3. Multiplication(*)\\n4. Division(/)\")\n        operator = input(\"Enter your choice (1,2,3,4) or type 'exit' to quit: \").lower()\n        if operator == 'exit':\n            print(\"Exiting the calculator. Goodbye!\")\n            break\n        # Input validation for operator",
        "detail": "matriales.Fanctions.tasks.calculator_code",
        "documentation": {}
    },
    {
        "label": "mean",
        "kind": 2,
        "importPath": "matriales.Fanctions.tasks.calculator_GUI_code",
        "description": "matriales.Fanctions.tasks.calculator_GUI_code",
        "peekOfCode": "def mean():\n    # Create the main window\n    window = tk.Tk()\n    window.title(\"Simple Calculator\")\n    window.geometry(\"300x400\")\n    # Global variables to store numbers and operator\n    num1 = tk.StringVar()\n    num2 = tk.StringVar()\n    operator = tk.StringVar()\n    # Functions for each operation",
        "detail": "matriales.Fanctions.tasks.calculator_GUI_code",
        "documentation": {}
    },
    {
        "label": "folder_path",
        "kind": 5,
        "importPath": "matriales.Fanctions.tasks.file_system",
        "description": "matriales.Fanctions.tasks.file_system",
        "peekOfCode": "folder_path = 'my_test_folder'  # Change this to your desired folder path\nnum_files = 10  # Change this to your desired number of files\n# Step 1: Open/Make a folder\nif not os.path.exists(folder_path):\n    os.makedirs(folder_path)\n    print(f\"Created folder: {folder_path}\")\nelse:\n    print(f\"Folder already exists: {folder_path}\")\n# Step 2: Create multiple files\nfor i in range(num_files):",
        "detail": "matriales.Fanctions.tasks.file_system",
        "documentation": {}
    },
    {
        "label": "num_files",
        "kind": 5,
        "importPath": "matriales.Fanctions.tasks.file_system",
        "description": "matriales.Fanctions.tasks.file_system",
        "peekOfCode": "num_files = 10  # Change this to your desired number of files\n# Step 1: Open/Make a folder\nif not os.path.exists(folder_path):\n    os.makedirs(folder_path)\n    print(f\"Created folder: {folder_path}\")\nelse:\n    print(f\"Folder already exists: {folder_path}\")\n# Step 2: Create multiple files\nfor i in range(num_files):\n    file_path = os.path.join(folder_path, f'file_{i+1}.txt')",
        "detail": "matriales.Fanctions.tasks.file_system",
        "documentation": {}
    },
    {
        "label": "total_files",
        "kind": 5,
        "importPath": "matriales.Fanctions.tasks.file_system",
        "description": "matriales.Fanctions.tasks.file_system",
        "peekOfCode": "total_files = len(os.listdir(folder_path))\nprint(f\"Total number of files after creation: {total_files}\")\n# Step 4: Delete half of the files randomly\nfiles_to_delete = random.sample(os.listdir(folder_path), total_files // 2)\nfor file in files_to_delete:\n    os.remove(os.path.join(folder_path, file))\n    print(f\"Deleted: {file}\")\n# Step 5: Final check\nremaining_files = len(os.listdir(folder_path))\nprint(f\"Total number of files remaining: {remaining_files}\")",
        "detail": "matriales.Fanctions.tasks.file_system",
        "documentation": {}
    },
    {
        "label": "files_to_delete",
        "kind": 5,
        "importPath": "matriales.Fanctions.tasks.file_system",
        "description": "matriales.Fanctions.tasks.file_system",
        "peekOfCode": "files_to_delete = random.sample(os.listdir(folder_path), total_files // 2)\nfor file in files_to_delete:\n    os.remove(os.path.join(folder_path, file))\n    print(f\"Deleted: {file}\")\n# Step 5: Final check\nremaining_files = len(os.listdir(folder_path))\nprint(f\"Total number of files remaining: {remaining_files}\")",
        "detail": "matriales.Fanctions.tasks.file_system",
        "documentation": {}
    },
    {
        "label": "remaining_files",
        "kind": 5,
        "importPath": "matriales.Fanctions.tasks.file_system",
        "description": "matriales.Fanctions.tasks.file_system",
        "peekOfCode": "remaining_files = len(os.listdir(folder_path))\nprint(f\"Total number of files remaining: {remaining_files}\")",
        "detail": "matriales.Fanctions.tasks.file_system",
        "documentation": {}
    },
    {
        "label": "Calculator1",
        "kind": 6,
        "importPath": "matriales.OOP.code.class_calculator",
        "description": "matriales.OOP.code.class_calculator",
        "peekOfCode": "class Calculator1:\n    def __init__(self, n1, n2):\n        self.n1 = n1\n        self.n2 = n2\n    def summation(self):\n        return self.n1 + self.n2\n    def subtraction(self):\n        return self.n1 - self.n2\n    def multiplication(self):\n        return self.n1 * self.n2",
        "detail": "matriales.OOP.code.class_calculator",
        "documentation": {}
    },
    {
        "label": "Calculator2",
        "kind": 6,
        "importPath": "matriales.OOP.code.class_calculator",
        "description": "matriales.OOP.code.class_calculator",
        "peekOfCode": "class Calculator2(Calculator1):\n    def power(self):\n        return self.n1 ** self.n2\nwhile True:\n    n1 = int(input(\"Enter number one: \"))\n    n2 = int(input(\"Enter second number: \"))\n    c = Calculator2(n1, n2)\n    operator = input(\"Choose your operator (+, -, *, /, **). Type 'exit' to quit: \")\n    if operator == \"+\":\n        print(f\"Result: {c.summation()}\")",
        "detail": "matriales.OOP.code.class_calculator",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task2",
        "description": "matriales.python_for_ml.tasks.task2",
        "peekOfCode": "message = \"###!!@mocleW EPGTQ!!!6789\"\nextract = message.split('@')[1].split('!')[0]\nprint(extract)\n# number_2\nreversed_message=extract[::-1].split(' ')[1]\nprint(reversed_message)\n# number_3\nvowels = \"aeiouAEIOU\"\nthe_final_word = extract.split(' ')[1]\n# Remove vowels from the second word",
        "detail": "matriales.python_for_ml.tasks.task2",
        "documentation": {}
    },
    {
        "label": "extract",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task2",
        "description": "matriales.python_for_ml.tasks.task2",
        "peekOfCode": "extract = message.split('@')[1].split('!')[0]\nprint(extract)\n# number_2\nreversed_message=extract[::-1].split(' ')[1]\nprint(reversed_message)\n# number_3\nvowels = \"aeiouAEIOU\"\nthe_final_word = extract.split(' ')[1]\n# Remove vowels from the second word\nfor char in vowels:",
        "detail": "matriales.python_for_ml.tasks.task2",
        "documentation": {}
    },
    {
        "label": "vowels",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task2",
        "description": "matriales.python_for_ml.tasks.task2",
        "peekOfCode": "vowels = \"aeiouAEIOU\"\nthe_final_word = extract.split(' ')[1]\n# Remove vowels from the second word\nfor char in vowels:\n    the_final_word = the_final_word.replace(char, \"\")\nprint(the_final_word)\n# number_4    \nfinal_decoded_message = f\"{reversed_message} {the_final_word}\"\nprint(\"Final decoded message:\", final_decoded_message)",
        "detail": "matriales.python_for_ml.tasks.task2",
        "documentation": {}
    },
    {
        "label": "the_final_word",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task2",
        "description": "matriales.python_for_ml.tasks.task2",
        "peekOfCode": "the_final_word = extract.split(' ')[1]\n# Remove vowels from the second word\nfor char in vowels:\n    the_final_word = the_final_word.replace(char, \"\")\nprint(the_final_word)\n# number_4    \nfinal_decoded_message = f\"{reversed_message} {the_final_word}\"\nprint(\"Final decoded message:\", final_decoded_message)",
        "detail": "matriales.python_for_ml.tasks.task2",
        "documentation": {}
    },
    {
        "label": "final_decoded_message",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task2",
        "description": "matriales.python_for_ml.tasks.task2",
        "peekOfCode": "final_decoded_message = f\"{reversed_message} {the_final_word}\"\nprint(\"Final decoded message:\", final_decoded_message)",
        "detail": "matriales.python_for_ml.tasks.task2",
        "documentation": {}
    },
    {
        "label": "e_mail",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_1",
        "description": "matriales.python_for_ml.tasks.task_1",
        "peekOfCode": "e_mail = \"Amit_ml@gmail.edu\"\n# to ensure the email contains exactly one \"@\" symbol using (.count)\n# to ensure the email contains exactly one \"@\" symbol using (.split('')[1])\nif e_mail.count('@') == 1 and '.' in e_mail.split('@')[1]:\n    print(\"Valid email\")\nelse:\n    print(\"Invalid email\")\n#__________________________________________________________________________________\n# number_2\n#_________",
        "detail": "matriales.python_for_ml.tasks.task_1",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_1",
        "description": "matriales.python_for_ml.tasks.task_1",
        "peekOfCode": "username = e_mail.split('@')[0]\nprint(\"Username:\", username)\n# __________________________________________________________________________________\n# number_3\n#_________\ndomain = e_mail.split('@')[1].split('.')[0]\nprint(\"Domain:\",domain)\n#__________________________________________________________________________________\n# number_4\n#_________",
        "detail": "matriales.python_for_ml.tasks.task_1",
        "documentation": {}
    },
    {
        "label": "domain",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_1",
        "description": "matriales.python_for_ml.tasks.task_1",
        "peekOfCode": "domain = e_mail.split('@')[1].split('.')[0]\nprint(\"Domain:\",domain)\n#__________________________________________________________________________________\n# number_4\n#_________\nif e_mail.split('gmil')[1] == \".com\":\n    print(\"Commercial Domain\")\nelif e_mail.split('gmil')[1] == \".edu\":\n    print(\"Educational Domain\")\nelse:",
        "detail": "matriales.python_for_ml.tasks.task_1",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_3",
        "description": "matriales.python_for_ml.tasks.task_3",
        "peekOfCode": "message = \"&&&**$gnirtS PLIO!!@1234\"\nextract = message.split('$')[1].split('!')[0]\nprint(extract)\n# number_2 \nreversed_message=extract[::-1].split(' ')[1]\nprint(reversed_message)\n#number_3\nthe_last_word = message.split(' ')[1].split('!')[0]\nthe_new_last_word = the_last_word.replace(\"I\",\"E\").replace(\"O\",\"U\")\n#number_4",
        "detail": "matriales.python_for_ml.tasks.task_3",
        "documentation": {}
    },
    {
        "label": "extract",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_3",
        "description": "matriales.python_for_ml.tasks.task_3",
        "peekOfCode": "extract = message.split('$')[1].split('!')[0]\nprint(extract)\n# number_2 \nreversed_message=extract[::-1].split(' ')[1]\nprint(reversed_message)\n#number_3\nthe_last_word = message.split(' ')[1].split('!')[0]\nthe_new_last_word = the_last_word.replace(\"I\",\"E\").replace(\"O\",\"U\")\n#number_4\nfinal_decoded_message = f\"{reversed_message} {the_new_last_word}\"",
        "detail": "matriales.python_for_ml.tasks.task_3",
        "documentation": {}
    },
    {
        "label": "the_last_word",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_3",
        "description": "matriales.python_for_ml.tasks.task_3",
        "peekOfCode": "the_last_word = message.split(' ')[1].split('!')[0]\nthe_new_last_word = the_last_word.replace(\"I\",\"E\").replace(\"O\",\"U\")\n#number_4\nfinal_decoded_message = f\"{reversed_message} {the_new_last_word}\"\nprint(\"Final decoded message:\", final_decoded_message)",
        "detail": "matriales.python_for_ml.tasks.task_3",
        "documentation": {}
    },
    {
        "label": "the_new_last_word",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_3",
        "description": "matriales.python_for_ml.tasks.task_3",
        "peekOfCode": "the_new_last_word = the_last_word.replace(\"I\",\"E\").replace(\"O\",\"U\")\n#number_4\nfinal_decoded_message = f\"{reversed_message} {the_new_last_word}\"\nprint(\"Final decoded message:\", final_decoded_message)",
        "detail": "matriales.python_for_ml.tasks.task_3",
        "documentation": {}
    },
    {
        "label": "final_decoded_message",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_3",
        "description": "matriales.python_for_ml.tasks.task_3",
        "peekOfCode": "final_decoded_message = f\"{reversed_message} {the_new_last_word}\"\nprint(\"Final decoded message:\", final_decoded_message)",
        "detail": "matriales.python_for_ml.tasks.task_3",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_4",
        "description": "matriales.python_for_ml.tasks.task_4",
        "peekOfCode": "message = \"##$$$@!yalpstcejorp EPUVT****9887\"\nextract = message.split('!')[1].split('*')[0]\nprint(extract)\nreversed_message=extract[::-1].split(' ')[1]\nprint(reversed_message)\nthe_last_word = message.split(' ')[1].split('*')[0]\nthe_new_last_word = the_last_word.replace(\"E\",\"A\").replace(\"U\",\"O\")\nfinal_decoded_message = f\"{reversed_message} {the_new_last_word}\"\nprint(\"Final decoded message:\", final_decoded_message)",
        "detail": "matriales.python_for_ml.tasks.task_4",
        "documentation": {}
    },
    {
        "label": "extract",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_4",
        "description": "matriales.python_for_ml.tasks.task_4",
        "peekOfCode": "extract = message.split('!')[1].split('*')[0]\nprint(extract)\nreversed_message=extract[::-1].split(' ')[1]\nprint(reversed_message)\nthe_last_word = message.split(' ')[1].split('*')[0]\nthe_new_last_word = the_last_word.replace(\"E\",\"A\").replace(\"U\",\"O\")\nfinal_decoded_message = f\"{reversed_message} {the_new_last_word}\"\nprint(\"Final decoded message:\", final_decoded_message)",
        "detail": "matriales.python_for_ml.tasks.task_4",
        "documentation": {}
    },
    {
        "label": "the_last_word",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_4",
        "description": "matriales.python_for_ml.tasks.task_4",
        "peekOfCode": "the_last_word = message.split(' ')[1].split('*')[0]\nthe_new_last_word = the_last_word.replace(\"E\",\"A\").replace(\"U\",\"O\")\nfinal_decoded_message = f\"{reversed_message} {the_new_last_word}\"\nprint(\"Final decoded message:\", final_decoded_message)",
        "detail": "matriales.python_for_ml.tasks.task_4",
        "documentation": {}
    },
    {
        "label": "the_new_last_word",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_4",
        "description": "matriales.python_for_ml.tasks.task_4",
        "peekOfCode": "the_new_last_word = the_last_word.replace(\"E\",\"A\").replace(\"U\",\"O\")\nfinal_decoded_message = f\"{reversed_message} {the_new_last_word}\"\nprint(\"Final decoded message:\", final_decoded_message)",
        "detail": "matriales.python_for_ml.tasks.task_4",
        "documentation": {}
    },
    {
        "label": "final_decoded_message",
        "kind": 5,
        "importPath": "matriales.python_for_ml.tasks.task_4",
        "description": "matriales.python_for_ml.tasks.task_4",
        "peekOfCode": "final_decoded_message = f\"{reversed_message} {the_new_last_word}\"\nprint(\"Final decoded message:\", final_decoded_message)",
        "detail": "matriales.python_for_ml.tasks.task_4",
        "documentation": {}
    },
    {
        "label": "MathClass",
        "kind": 6,
        "importPath": "matriales.Workshop.code.calculator_task",
        "description": "matriales.Workshop.code.calculator_task",
        "peekOfCode": "class MathClass():\n    def __init__(self, num1=0, num2=0):\n        self.num1 = num1\n        self.num2 = num2\n    def factorial(self):\n        result = 1\n        for i in range(0, self.num1):\n            result *= self.num1 - i\n        return result\n    def isPrime(self):",
        "detail": "matriales.Workshop.code.calculator_task",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "matriales.Workshop.code.calculator_task",
        "description": "matriales.Workshop.code.calculator_task",
        "peekOfCode": "num1 = int(input(\"Enter your first number: \"))\nnum2 = int(input(\"Enter your second number: \"))\nM = MathClass(num1 , num2)\nprint(M.factorial())\nprint(M.dividors())\nprint(M.isPrime())",
        "detail": "matriales.Workshop.code.calculator_task",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "matriales.Workshop.code.calculator_task",
        "description": "matriales.Workshop.code.calculator_task",
        "peekOfCode": "num2 = int(input(\"Enter your second number: \"))\nM = MathClass(num1 , num2)\nprint(M.factorial())\nprint(M.dividors())\nprint(M.isPrime())",
        "detail": "matriales.Workshop.code.calculator_task",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "matriales.Workshop.code.calculator_task",
        "description": "matriales.Workshop.code.calculator_task",
        "peekOfCode": "M = MathClass(num1 , num2)\nprint(M.factorial())\nprint(M.dividors())\nprint(M.isPrime())",
        "detail": "matriales.Workshop.code.calculator_task",
        "documentation": {}
    },
    {
        "label": "Chatbot",
        "kind": 6,
        "importPath": "matriales.Workshop.code.chat_pot_class_task",
        "description": "matriales.Workshop.code.chat_pot_class_task",
        "peekOfCode": "class Chatbot:\n    def chat(self):\n        \"\"\"Start the chatbot conversation.\"\"\"\n        print(\"Chatbot: Hi! How can I assist you today?\")\n        while True:\n            user_input = input(\"User: \").lower()\n            response = get_response(user_input)\n            print(\"Chatbot:\", response)\n            if user_input == \"goodbye\":\n                break",
        "detail": "matriales.Workshop.code.chat_pot_class_task",
        "documentation": {}
    },
    {
        "label": "get_response",
        "kind": 2,
        "importPath": "matriales.Workshop.code.chat_pot_class_task",
        "description": "matriales.Workshop.code.chat_pot_class_task",
        "peekOfCode": "def get_response(user_input):\n    for key in responses:\n        if key in user_input:\n            return random.choice(responses[key])\n    return random.choice(responses[\"default\"])\n# Chatbot class\nclass Chatbot:\n    def chat(self):\n        \"\"\"Start the chatbot conversation.\"\"\"\n        print(\"Chatbot: Hi! How can I assist you today?\")",
        "detail": "matriales.Workshop.code.chat_pot_class_task",
        "documentation": {}
    },
    {
        "label": "chatbot",
        "kind": 5,
        "importPath": "matriales.Workshop.code.chat_pot_class_task",
        "description": "matriales.Workshop.code.chat_pot_class_task",
        "peekOfCode": "chatbot = Chatbot()\nchatbot.chat()",
        "detail": "matriales.Workshop.code.chat_pot_class_task",
        "documentation": {}
    },
    {
        "label": "Dividors",
        "kind": 6,
        "importPath": "matriales.Workshop.code.common_dividors",
        "description": "matriales.Workshop.code.common_dividors",
        "peekOfCode": "class Dividors:\n    def __init__(self,num1,num2):\n        self.num1 = num1\n        self.num2 = num2\n    def dividors(self):\n        mn = min(self.num1, self.num2)\n        common_dividors = []\n        for i in range(1, mn+1):\n            if self.num1 % i == 0 and self.num2 % i ==0:\n                common_dividors.append(i)",
        "detail": "matriales.Workshop.code.common_dividors",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 5,
        "importPath": "matriales.Workshop.code.common_dividors",
        "description": "matriales.Workshop.code.common_dividors",
        "peekOfCode": "D = Dividors(20,10)\nprint(D.dividors())",
        "detail": "matriales.Workshop.code.common_dividors",
        "documentation": {}
    },
    {
        "label": "String",
        "kind": 6,
        "importPath": "matriales.Workshop.code.common_string",
        "description": "matriales.Workshop.code.common_string",
        "peekOfCode": "class String:\n    def __init__(self,str1,str2):\n        self.str1 = str1\n        self.str2 = str2\n        self.longes_str = \"\"\n    def string(self):\n        for i in range(len(self.str1)):\n            for j in range(i, len(self.str1)):\n                sub_str = self.str1[i:j+1]\n                if sub_str in self.str2:",
        "detail": "matriales.Workshop.code.common_string",
        "documentation": {}
    },
    {
        "label": "str1",
        "kind": 5,
        "importPath": "matriales.Workshop.code.common_string",
        "description": "matriales.Workshop.code.common_string",
        "peekOfCode": "str1 = input(\"Enter your first string: \")\nstr2 = input(\"Enter your second string: \")\nclass String:\n    def __init__(self,str1,str2):\n        self.str1 = str1\n        self.str2 = str2\n        self.longes_str = \"\"\n    def string(self):\n        for i in range(len(self.str1)):\n            for j in range(i, len(self.str1)):",
        "detail": "matriales.Workshop.code.common_string",
        "documentation": {}
    },
    {
        "label": "str2",
        "kind": 5,
        "importPath": "matriales.Workshop.code.common_string",
        "description": "matriales.Workshop.code.common_string",
        "peekOfCode": "str2 = input(\"Enter your second string: \")\nclass String:\n    def __init__(self,str1,str2):\n        self.str1 = str1\n        self.str2 = str2\n        self.longes_str = \"\"\n    def string(self):\n        for i in range(len(self.str1)):\n            for j in range(i, len(self.str1)):\n                sub_str = self.str1[i:j+1]",
        "detail": "matriales.Workshop.code.common_string",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "matriales.Workshop.code.common_string",
        "description": "matriales.Workshop.code.common_string",
        "peekOfCode": "S = String(str1,str2)\nprint(S.string())",
        "detail": "matriales.Workshop.code.common_string",
        "documentation": {}
    },
    {
        "label": "WordCounter",
        "kind": 6,
        "importPath": "matriales.Workshop.code.count_word",
        "description": "matriales.Workshop.code.count_word",
        "peekOfCode": "class WordCounter:\n    def __init__(self, words):\n        self.words = words\n    def count_words(self):\n        for word in conting_words:\n            print(f\"{word}:{words.count(word)}\")\nwords = [\"Welcome\", \"Ali\", \"Hi\", \"Ali\", \"No\", \"Hi\", \"No\", \"Ali\", \"No\", \"Ali\"]\nconting_words = set(words)\nW = WordCounter(words)\nprint(W.count_words())",
        "detail": "matriales.Workshop.code.count_word",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "matriales.Workshop.code.count_word",
        "description": "matriales.Workshop.code.count_word",
        "peekOfCode": "words = [\"Welcome\", \"Ali\", \"Hi\", \"Ali\", \"No\", \"Hi\", \"No\", \"Ali\", \"No\", \"Ali\"]\nconting_words = set(words)\nW = WordCounter(words)\nprint(W.count_words())",
        "detail": "matriales.Workshop.code.count_word",
        "documentation": {}
    },
    {
        "label": "conting_words",
        "kind": 5,
        "importPath": "matriales.Workshop.code.count_word",
        "description": "matriales.Workshop.code.count_word",
        "peekOfCode": "conting_words = set(words)\nW = WordCounter(words)\nprint(W.count_words())",
        "detail": "matriales.Workshop.code.count_word",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "matriales.Workshop.code.count_word",
        "description": "matriales.Workshop.code.count_word",
        "peekOfCode": "W = WordCounter(words)\nprint(W.count_words())",
        "detail": "matriales.Workshop.code.count_word",
        "documentation": {}
    },
    {
        "label": "Factorial",
        "kind": 6,
        "importPath": "matriales.Workshop.code.factorial_class",
        "description": "matriales.Workshop.code.factorial_class",
        "peekOfCode": "class Factorial:\n    def factorial(self, num):\n        if num == 0:\n            return 0 \n        if num == 1:\n            return 1\n        return num * self.factorial(num - 1)\nF = Factorial()\nprint(F.factorial(5))",
        "detail": "matriales.Workshop.code.factorial_class",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 5,
        "importPath": "matriales.Workshop.code.factorial_class",
        "description": "matriales.Workshop.code.factorial_class",
        "peekOfCode": "F = Factorial()\nprint(F.factorial(5))",
        "detail": "matriales.Workshop.code.factorial_class",
        "documentation": {}
    },
    {
        "label": "FileSystem",
        "kind": 6,
        "importPath": "matriales.Workshop.code.file_system",
        "description": "matriales.Workshop.code.file_system",
        "peekOfCode": "class FileSystem:\n    def __init__(self, input_file):\n        self.input_file = input_file\n    def file_system(self):\n        text = self.input_file.read()\n        input_file.close()\n        text = text.replace('\\n', ' ')\n        words = text.split(' ')\n        unique_words = set(words)\n        word_counts = dict()",
        "detail": "matriales.Workshop.code.file_system",
        "documentation": {}
    },
    {
        "label": "input_file",
        "kind": 5,
        "importPath": "matriales.Workshop.code.file_system",
        "description": "matriales.Workshop.code.file_system",
        "peekOfCode": "input_file = open(\"D:/diploma AI/advanced_machine_learning_course_Amit/test.txt\", \"r\")\nclass FileSystem:\n    def __init__(self, input_file):\n        self.input_file = input_file\n    def file_system(self):\n        text = self.input_file.read()\n        input_file.close()\n        text = text.replace('\\n', ' ')\n        words = text.split(' ')\n        unique_words = set(words)",
        "detail": "matriales.Workshop.code.file_system",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 5,
        "importPath": "matriales.Workshop.code.file_system",
        "description": "matriales.Workshop.code.file_system",
        "peekOfCode": "F = FileSystem(input_file)\nprint(F.file_system())",
        "detail": "matriales.Workshop.code.file_system",
        "documentation": {}
    },
    {
        "label": "Primary",
        "kind": 6,
        "importPath": "matriales.Workshop.code.Prime_class",
        "description": "matriales.Workshop.code.Prime_class",
        "peekOfCode": "class Primary:\n    def __init__(self,num):\n        self.num = num\n    def isprime(self):\n        for i in range(2,self.num):\n            if self.num % i == 0:\n                return False\n            else:\n                return True\np= Primary(5)",
        "detail": "matriales.Workshop.code.Prime_class",
        "documentation": {}
    },
    {
        "label": "Generate",
        "kind": 6,
        "importPath": "matriales.Workshop.code.random_passowrd",
        "description": "matriales.Workshop.code.random_passowrd",
        "peekOfCode": "class Generate:\n    def generate_password(self,length):\n        char = \"abcdefghjklmnopqrstuvxyzABCDEFGHJKLMNOPQRSTUVXYZ1234567890!@#$%^&*\"\n        num_of_char = len(char)\n        password = \"\"\n        for _ in range(length):\n            rand_index = random.randrange(0,num_of_char)\n            password+=char[rand_index]\n        return password\npassword_length = int(input(\"Enter number of char in password: \"))",
        "detail": "matriales.Workshop.code.random_passowrd",
        "documentation": {}
    },
    {
        "label": "password_length",
        "kind": 5,
        "importPath": "matriales.Workshop.code.random_passowrd",
        "description": "matriales.Workshop.code.random_passowrd",
        "peekOfCode": "password_length = int(input(\"Enter number of char in password: \"))\nG = Generate()\nrandom_password = G.generate_password(password_length)\nprint(random_password)",
        "detail": "matriales.Workshop.code.random_passowrd",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "matriales.Workshop.code.random_passowrd",
        "description": "matriales.Workshop.code.random_passowrd",
        "peekOfCode": "G = Generate()\nrandom_password = G.generate_password(password_length)\nprint(random_password)",
        "detail": "matriales.Workshop.code.random_passowrd",
        "documentation": {}
    },
    {
        "label": "random_password",
        "kind": 5,
        "importPath": "matriales.Workshop.code.random_passowrd",
        "description": "matriales.Workshop.code.random_passowrd",
        "peekOfCode": "random_password = G.generate_password(password_length)\nprint(random_password)",
        "detail": "matriales.Workshop.code.random_passowrd",
        "documentation": {}
    },
    {
        "label": "responses",
        "kind": 5,
        "importPath": "matriales.Workshop.code.responses",
        "description": "matriales.Workshop.code.responses",
        "peekOfCode": "responses = {\n    \"hello\": [\"Hello!\", \"Hi there!\", \"Greetings!\"],\n    \"how are you\": [\"I'm doing well, thank you!\", \"I'm fine, how about you?\"],\n    \"goodbye\": [\"Goodbye!\", \"See you later!\", \"Farewell!\"],\n    \"default\": [\"I'm sorry, I didn't understand.\", \"Could you please rephrase that?\"]\n}",
        "detail": "matriales.Workshop.code.responses",
        "documentation": {}
    },
    {
        "label": "reversing",
        "kind": 6,
        "importPath": "matriales.Workshop.code.reverse_string",
        "description": "matriales.Workshop.code.reverse_string",
        "peekOfCode": "class reversing:\n    def __init__(self,s):\n        self.s = s\n    def fun(self):\n        first = self.s.split(\" \")\n        new_first = first[::-1]\n        new_str = \" \".join(new_first)\n        return new_str\ns = input(\"Enter your string: \")\nR = reversing(s)",
        "detail": "matriales.Workshop.code.reverse_string",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "matriales.Workshop.code.reverse_string",
        "description": "matriales.Workshop.code.reverse_string",
        "peekOfCode": "s = input(\"Enter your string: \")\nR = reversing(s)\nprint(R.fun())",
        "detail": "matriales.Workshop.code.reverse_string",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "matriales.Workshop.code.reverse_string",
        "description": "matriales.Workshop.code.reverse_string",
        "peekOfCode": "R = reversing(s)\nprint(R.fun())",
        "detail": "matriales.Workshop.code.reverse_string",
        "documentation": {}
    }
]